service: users-api

provider:
  name: aws
  runtime: nodejs14.x
  apiGateway:
    apiKeys:
      - users-api-key
  iam:
    role:
      statements:
        - Effect: Allow
          Action: 'dynamodb:*'
          Resource: arn:aws:dynamodb:us-east-1:328697830963:table/usersTable
        - Effect: Allow
          Action: 's3:*'
          Resource: arn:aws:s3:::stivenramireza-serverless/*
  environment:
    BUCKET: stivenramireza-serverless
    SECRET_EGG: ${ssm:/SECRET_EGG}

# plugins:
#   - serverless-offline
#   - serverless-dynamodb-local

custom:
  customDomain:
    domainName: serverless.stivenramireza.com
    stage: dev
    basePath: api
    certificateName: '*.stivenramireza.com'
    createRoute53Record: true
    createRoute53IPv6Record: true
    endpointType: 'regional'
    securityPolicy: tls_1_2
    apiType: rest
    autoDomain: false

  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
  
  apiGatewayServiceProxies:
    - sqs:
        path: /users/likes
        method: post
        queueName: like-queue
        cors: true
        response:
          template:
            success: |-
              { "message: "accepted" }
            clientError: |-
              { "message": "there is an error in your request" }
            serverError: |-
              { "message": "there was an error handling your request" }

package:
  individually: true
  patterns:
    - "!*/**"

constructs:
  sqs-queue:
    type: queue
    batchSize: 1
    worker:
      handler: src/functions/likes/like-users.handler
      package:
        patterns:
          - "src/functions/likes/like-user.js"
    extensions:
      queue:
        Properties:
          QueueName: like-queue

functions:
  custom-authorizer:
    handler: src/functions/auth/authorizer.handler
    package:
      patterns:
        - "src/functions/auth/authorizer.js"

  get-users:
    handler: src/functions/users/get_users.handler
    runtime: python3.8
    package:
      patterns:
        - "src/functions/users/get_users.py"
        - "src/utils/*.py"
        - "requirements.txt"
    events:
      - http:
          private: true
          path: users
          method: GET
  
  get-user:
    handler: src/functions/users/get-user.handler
    package:
      patterns:
        - "src/functions/users/get-user.js"
        - "src/utils/*.js"
    events:
      - http:
          path: users/{id}
          method: GET
          request:
            parameters:
              paths:
                id: true
  
  create-users:
    handler: src/functions/users/create-users.handler
    package:
      patterns:
        - "src/functions/users/create-users.js"
        - "src/schemas/user.json"
        - "src/utils/*.js"
    events:
      - http:
          path: users
          method: POST
          request:
            schemas:
              application/json: ${file(src/schemas/users/user.json)}
          authorizer:
            name: custom-authorizer
            resultTtlInSeconds: 15

  update-users:
    handler: src/functions/users/update-users.handler
    package:
      patterns:
        - "src/functions/users/update-users.js"
        - "src/schemas/user.json"
        - "src/utils/*.js"
    events:
      - http:
          path: users/{id}
          method: PATCH
          request:
            parameters:
              paths:
                id: true
            schemas:
              application/json: ${file(src/schemas/users/user.json)}
  
  delete-users:
    handler: src/functions/users/delete_users.handler
    runtime: python3.8
    package:
      patterns:
        - "src/functions/users/delete_users.py"
        - "src/utils/*.py"
    events:
      - http:
          path: users/{id}
          method: DELETE
          request:
            parameters:
              paths:
                id: true

  sign-url:
    handler: src/functions/files/sign-url.handler
    package:
      patterns:
        - "src/functions/files/sign-url.js"
        - "src/utils/*.js"
    events:
      - http:
          path: files/signed-url
          method: GET
          request:
            parameters:
              querystrings:
                filename: true

  thumb-generator:
    handler: src/functions/files/thumb-generator.handler
    layers:
      - { Ref: BaseLambdaLayer }
    package:
      patterns:
        - "src/functions/files/thumb-generator.js"
        - "src/utils/*.js"
    events:
      - s3:
          bucket: stivenramireza-serverless
          event: s3:ObjectCreated:*
          existing: true
          rules:
            - prefix: upload/

layers:
  base:
    name: "prod-dependencies"
    compatibleRuntimes:
      - "nodejs14.x"
    package:
      artifact: nodejs.zip

resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: usersTable
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    S3Bucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        AccessControl: PublicRead
        BucketName: stivenramireza-serverless

    SampleBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref S3Bucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Action:
                - 's3:GetObject'
              Effect: Allow
              Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref S3Bucket
                  - /*
              Principal: '*'

plugins:
  - serverless-apigateway-service-proxy
  - serverless-lift
  # - serverless-domain-manager
